/*
 * Copyright 2013 Swedish E-identification Board (E-legitimationsnämnden)
 *  		 
 *   Licensed under the EUPL, Version 1.1 or ñ as soon they will be approved by the 
 *   European Commission - subsequent versions of the EUPL (the "Licence");
 *   You may not use this work except in compliance with the Licence. 
 *   You may obtain a copy of the Licence at:
 * 
 *   http://joinup.ec.europa.eu/software/page/eupl 
 * 
 *   Unless required by applicable law or agreed to in writing, software distributed 
 *   under the Licence is distributed on an "AS IS" basis,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or 
 *   implied.
 *   See the Licence for the specific language governing permissions and limitations 
 *   under the Licence.
 */
package com.aaasec.sigserv.csdaemon;

import com.aaasec.sigserv.cscommon.ExtFileFilter;
import com.aaasec.sigserv.cscommon.FileOps;
import com.aaasec.sigserv.cscommon.ObservableFrameCloser;
import com.aaasec.sigserv.cscommon.ObserverConstants;
import com.aaasec.sigserv.csdaemon.config.Preferences;
import com.aaasec.sigserv.csdaemon.config.WebXmlData;
import iaik.security.provider.IAIK;
import java.awt.event.ActionEvent;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.IOException;
import java.security.Security;
import java.util.LinkedList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.filechooser.FileFilter;

/**
 * The main class of the daemon application.
 */
public class SigserverDaemon extends javax.swing.JFrame implements Observer, ObserverConstants {

    private String localDir, currentWebXml = null;
    private DaemonIF cacheDeamon;
    File webXmlConf;
    File webXmlBack;
    WebXmlData webXml;
    DaemonModel model;
    private static final Logger LOG = Logger.getLogger(SigserverDaemon.class.getName());
    private ResourceBundle uiText = ResourceBundle.getBundle("adUiText");
    boolean initialized;
    private List<String> parameterExceptions;

    /**
     * Creates new form SigserverDaemon
     */
    public SigserverDaemon() {
        super("TSL Trust - Policy Admin Deamon");
        localDir = System.getProperty("user.dir");
        initComponents();
        LOG.info("Logger initialized");
        parameterExceptions = getParameterExceptions();
        webXmlConf = new File(localDir + "/conf/webXmlLoc.txt");
        webXmlBack = new File(localDir + "/conf/backup.xml");
        jMenuItemBackup.setEnabled(false);
        if (!webXmlBack.canRead()) {
            jMenuItemRestore.setEnabled(false);
        }
        model = new DaemonModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktop = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemPreferences = new javax.swing.JMenuItem();
        jMenuItemLocateWebXml = new javax.swing.JMenuItem();
        jMenuItemBackup = new javax.swing.JMenuItem();
        jMenuItemRestore = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemRestart = new javax.swing.JMenuItem();
        jMenuWindows = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        desktop.setBackground(new java.awt.Color(0, 51, 51));
        desktop.setAlignmentX(0.0F);
        desktop.setAlignmentY(0.0F);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("adUiText"); // NOI18N
        jButton1.setText(bundle.getString("ButtonStart")); // NOI18N
        jButton1.setAlignmentX(0.5F);
        jButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 157, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1006, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenu1.setText(bundle.getString("MenuFile")); // NOI18N

        jMenuItemPreferences.setText(bundle.getString("MenuItemPreferences")); // NOI18N
        jMenuItemPreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPreferencesActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemPreferences);

        jMenuItemLocateWebXml.setText("Locate web.xml");
        jMenuItemLocateWebXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLocateWebXmlActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemLocateWebXml);

        jMenuItemBackup.setText("Backup web.xml");
        jMenuItemBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBackupActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemBackup);

        jMenuItemRestore.setText("Restore web.xml");
        jMenuItemRestore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRestoreActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemRestore);
        jMenu1.add(jSeparator1);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(bundle.getString("MenuTools")); // NOI18N

        jMenuItemRestart.setText(bundle.getString("MenuItemRestart")); // NOI18N
        jMenuItemRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRestartActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemRestart);

        jMenuBar1.add(jMenu2);

        jMenuWindows.setText(bundle.getString("MenuWindows")); // NOI18N
        jMenuBar1.add(jMenuWindows);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, desktop, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1163, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(desktop, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemPreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPreferencesActionPerformed
        openPreferences();
    }//GEN-LAST:event_jMenuItemPreferencesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        startStopCaching();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItemRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRestartActionPerformed
        restartConsole();
    }//GEN-LAST:event_jMenuItemRestartActionPerformed

    private void jMenuItemLocateWebXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLocateWebXmlActionPerformed
        selectWebXmlLocation();
    }//GEN-LAST:event_jMenuItemLocateWebXmlActionPerformed

    private void jMenuItemBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBackupActionPerformed
        backupWebXml();
    }//GEN-LAST:event_jMenuItemBackupActionPerformed

    private void jMenuItemRestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRestoreActionPerformed
        restoreWebXml();
    }//GEN-LAST:event_jMenuItemRestoreActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        dispose();
    }//GEN-LAST:event_jMenuItemExitActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemBackup;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemLocateWebXml;
    private javax.swing.JMenuItem jMenuItemPreferences;
    private javax.swing.JMenuItem jMenuItemRestart;
    private javax.swing.JMenuItem jMenuItemRestore;
    private javax.swing.JMenu jMenuWindows;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    // End of variables declaration//GEN-END:variables

    private void openPreferences() {
        Preferences prefIF = new Preferences(webXml, this);
        desktop.add(prefIF);
        addListener(prefIF);
        try {
            prefIF.setSelected(true);
            prefIF.setMaximum(true);
        } catch (PropertyVetoException ex) {
            LOG.log(Level.INFO, null, ex);
        }
        setWindowsMenu();
    }

    private List<String> getParameterExceptions() {
        List<String> parameterExceptions = new LinkedList<String>();
        parameterExceptions.add("DiscoFeedUrl");
        return parameterExceptions;
    }

    /**
     * Main method of the TSL Trust admin daemon
     *
     * @param args arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Security.insertProviderAt(new IAIK(), 2);
                Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

                try {
                    // Get System Look and Feel
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    //Use Nimbus Look and feel if installed
                    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                        String lafName = info.getName();
                        if ("XNimbus".equals(info.getName())) {
                            javax.swing.UIManager.setLookAndFeel(info.getClassName());
                            break;
                        }
                    }
                } catch (Exception ex) {
                    LOG.log(Level.SEVERE, null, ex);
                }


//                // register content handler factory for OCSP
//                HttpURLConnection.setContentHandlerFactory(new OCSPContentHandlerFactory());
                new SigserverDaemon().setVisible(true);
            }
        });
    }

    private void openCacheDeamon() {
        cacheDeamon = new DaemonIF(model, this);
        desktop.add(cacheDeamon);
        addListener(cacheDeamon);
        try {
            cacheDeamon.setMaximum(true);
        } catch (PropertyVetoException ex) {
            LOG.log(Level.WARNING, null, ex);
        }
        setWindowsMenu();
        LOG.info("Starting Cache Deamon");
    }

    private void addListener(JInternalFrame iFrame) {
        final JInternalFrame thisFrame = iFrame;
        InternalFrameListener ifl = new InternalFrameListener() {
            @Override
            public void internalFrameOpened(InternalFrameEvent e) {
                //setWindowsMenu();
            }

            @Override
            public void internalFrameClosing(InternalFrameEvent e) {
                if (thisFrame.getClass().equals(Preferences.class)) {
                    if (((Preferences) thisFrame).save) {
                        JInternalFrame[] allFrames = desktop.getAllFrames();
                        for (JInternalFrame iframe : allFrames) {
                            if (iframe.getClass().equals(DaemonIF.class)) {
                                iframe.doDefaultCloseAction();
                            }
                        }
                    }
                }
            }

            @Override
            public void internalFrameClosed(InternalFrameEvent e) {
                setWindowsMenu();
            }

            @Override
            public void internalFrameIconified(InternalFrameEvent e) {
            }

            @Override
            public void internalFrameDeiconified(InternalFrameEvent e) {
            }

            @Override
            public void internalFrameActivated(InternalFrameEvent e) {
            }

            @Override
            public void internalFrameDeactivated(InternalFrameEvent e) {
            }
        };

        iFrame.addInternalFrameListener(ifl);
    }

    private void restartConsole() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SigserverDaemon().setVisible(true);
            }
        });
        dispose();
    }

    private void setWindowsMenu() {
        jMenuWindows.removeAll();
        JInternalFrame[] allFrames = desktop.getAllFrames();
        for (int i = 0; i < allFrames.length; i++) {
            JMenuItem mItem = new JMenuItem(allFrames[i].getTitle());
            mItem.addActionListener(new SelectInternalFrames(allFrames[i]));
            jMenuWindows.add(mItem);
        }
    }

    private void startStopCaching() {
        if (jButton1.getText().equals(uiText.getString("ButtonSelectWebXML"))) {
            selectWebXmlLocation();
            if (initialized) {
                jButton1.setText(uiText.getString("ButtonStart"));
            }
            return;
        }
        if (jButton1.getText().equals(uiText.getString("ButtonStart"))) {
            openCacheDeamon();
            jButton1.setText(uiText.getString("ButtonStop"));
            return;
        }
        if (jButton1.getText().equals(uiText.getString("ButtonStop"))) {
            jButton1.setText(uiText.getString("ButtonStopping"));
            cacheDeamon.stopDeamon();
        }
    }

    public void update(Observable o, Object arg) {
        if (o instanceof ObservableFrameCloser) {
            if (arg.equals(CACHEDEAMON_CLOSE) && cacheDeamon.isStop()) {
                jButton1.setText(uiText.getString("ButtonStart"));
            }
            if (arg.equals(PREFERENCES_SAVE)) {
                restartConsole();
            }
        }
    }

    private void getCurrentWebXml() {
        if (webXmlConf.canRead()) {
            List<String> fileLines = FileOps.readTextLineFile(webXmlConf);
            if (!fileLines.isEmpty()) {
                currentWebXml = fileLines.get(0);
                webXml = new WebXmlData(new File(currentWebXml));
                getTtModel();
            }
        }
        if (!initialized) {
            jButton1.setText(uiText.getString("ButtonSelectWebXML"));
            jMenuItemBackup.setEnabled(false);
        } else {
            jMenuItemBackup.setEnabled(true);
        }
    }

    private void storeCurrentWebXml(String webXmlLocation) {
        if (!webXmlConf.canRead()) {
            try {
                (new File(webXmlConf.getParent())).mkdirs();
            } catch (Exception ex) {
            }
        }
        try {
            FileOps.saveTxtFile(webXmlConf, webXmlLocation);
            getCurrentWebXml();
        } catch (Exception ex) {
        }
    }

    private void selectWebXmlLocation() {
        String currentWebXmlLocation = (currentWebXml != null) ? currentWebXml : localDir;
        JFileChooser fc = new JFileChooser(new File(currentWebXmlLocation));
        fc.setDialogTitle("TSL Trust Admin Service web.xml file");
        fc.setApproveButtonText("Select");
        fc.setAcceptAllFileFilterUsed(false);
        FileFilter filt1 = new ExtFileFilter("XML Files", new String[]{"XML"});
        fc.addChoosableFileFilter(filt1);

        int returnVal = fc.showOpenDialog(fc);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            if (file.exists()) {
                try {
                    String fileName = file.getCanonicalPath();
                    storeCurrentWebXml(fileName);
                } catch (IOException ex) {
                }
            }
        }
    }

    private void setDevMode(boolean selected) {
        if (webXml.isInitialized()) {
            if (selected) {
                webXml.updateParameter("Mode", "devmode");
            } else {
                webXml.updateParameter("Mode", "production");
            }
        }
    }

    private void getTtModel() {
        initialized = true;
        String lotlUrl = getWebXmlValue("LotlURL");
        String discoFeedUrl = getWebXmlValue("DiscoFeedUrl");
        String mode = getWebXmlValue("Mode");
        String dataLocation = getWebXmlValue("DataLocation");
        String maxDetailedLogSize = getWebXmlValue("MaxConsoleLogSize");
        String maxSumLogAge = getWebXmlValue("MaxMajorLogAge");
        String cache = getWebXmlValue("Caching");
        String tslBlockedUrlsuffix = getWebXmlValue("TslBlockedUrlsuffix");
        int tslRefreshDelay;
        try {
            tslRefreshDelay = Integer.valueOf(getWebXmlValue("TSLrecacheTime")) * 1000 * 60 * 60;
        } catch (Exception ex) {
            tslRefreshDelay = 1000 * 60 * 60 * 24;
        }
        String caCountry = getWebXmlValue("CaCountry");
        String caOrgName = getWebXmlValue("CaOrganizationName");
        String caOrgUnit = webXml.getValue("CaOrgUnitName");
        String caSerial = getWebXmlValue("CaSerialNumber");
        String caCommonName = getWebXmlValue("CaCommonName");
        String caFileStorageLocation = getWebXmlValue("CaFileStorageLocation");
        String caDistributionURL = getWebXmlValue("CaDistributionURL");

        if (caCommonName.indexOf("####") == -1) {
            initialized = false;
        }

        if (initialized) {
//            ttModel = new TslTrustModel(lotlUrl, discoFeedUrl, dataLocation, mode, maxDetailedLogSize, maxSumLogAge, tslRefreshDelay, tslBlockedUrlsuffix);
//            ttModel.setLotlSigCerts(LotlSigCert.getCertificates(dataLocation));
//            ttModel.setCaching(cache);
//            ttModel.setCaCountry(caCountry);
//            ttModel.setCaOrgName(caOrgName);
//            ttModel.setCaOrgUnitName(caOrgUnit);
//            ttModel.setCaSerialNumber(caSerial);
//            ttModel.setCaCommonName(caCommonName);
//            ttModel.setCaFileStorageLocation(caFileStorageLocation);
//            ttModel.setCaDistributionURL(caDistributionURL);
        }
    }

    private String getWebXmlValue(String parameter) {
        parameterExceptions = getParameterExceptions();
        String value = webXml.getValue(parameter);

        if (!parameterExceptions.contains(parameter)) {
            if (value.length() == 0) {
                initialized = false;
            }
        }
        return value;
    }

    private void backupWebXml() {
        File webXmlFile = new File(currentWebXml);
        if (!webXmlFile.canRead()) {
            return;
        }
        FileOps.saveByteFile(FileOps.readBinaryFile(webXmlFile), webXmlBack);
        jMenuItemRestore.setEnabled(true);
    }

    private void restoreWebXml() {
        File webXmlFile = new File(currentWebXml);
        if (webXmlFile.getParent() == null || !(new File(webXmlFile.getParent())).exists()) {
            return;
        }
        if (!webXmlBack.canRead()) {
            return;
        }
        if (JOptionPane.showConfirmDialog(this,
                "Do you want to replace the current web.xml file with the previously backed up version",
                "Restore web.xml",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE) == 0) {
            FileOps.saveByteFile(FileOps.readBinaryFile(webXmlBack), webXmlFile);
            restartConsole();
        }
    }

    class SelectInternalFrames extends AbstractAction {

        private JInternalFrame iFrame;

        public SelectInternalFrames(JInternalFrame iFrame) {
            super(iFrame.getTitle());
            this.iFrame = iFrame;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                iFrame.setSelected(true);
            } catch (Exception ex) {
            }
        }
    }
}
